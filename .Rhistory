library(distancematrix)
library(distancematrix)
library(distancematrix)
library(distancematrix)
calculate_spherical_distance
library(distancematrix)
rm(list = ls())
# Set this to true if you are Anna Wilke
i_am_anna <- TRUE
# Set the number of set permutations you would like to run
set_perms <- 10^5*5
# Clear memory, load packages ---------------------------------------------
library(xlsx)
library(foreign)
library(blockTools)
library(car)
library(plyr)
library(dplyr)
library(devtools)
# install_github("jaspercooper/distancematrix")
library(distancematrix)
# install_github("acoppock/randomizr")
library(randomizr)
# Read in data -------------------
# Clear memory, load packages ---------------------------------------------
library(xlsx)
library(foreign)
library(blockTools)
library(car)
library(plyr)
library(dplyr)
library(devtools)
# install_github("jaspercooper/distancematrix")
library(distancematrix)
# install_github("acoppock/randomizr")
library(randomizr)
# Read in data ------------------------------------------------------------
# Do we need the TC sizes this time?
# TC_sizes <-
#      read.xlsx("data/mapping_and_covariates/mturk/household_counts.xlsx",
#                sheetIndex = 1)
bibanda <- read.dta("/Volumes/Boxcryptor/Box Sync/07_Questionnaires&Data/Listing_main/03_DataManagement/04 Data_encrypted/1_Data/2_Clean/SN_LIST_clean.dta",
convert.dates = T,
convert.factors = T,
convert.underscore = T
)
# Clean Village Names -----------------------------------------------------
bibanda$village <- toupper(bibanda$village)
bibanda$tc.name[bibanda$tc.name == ""] <-
bibanda$village[bibanda$tc.name == ""]
# Output some data that I used to make map to harmonize names --------------
# data_map <- select(bibanda, village, latitude, longitude)
# data_map <- cbind(1:length(bibanda$village), data_map)
# names(data_map)[1] <- "id"
# write.csv(x = data_map, file = "map_data.csv")
#
# village_mapping <- select(bibanda, village, tc.name)
# write.csv(x = village_mapping, file = "village_mapping.csv")
#
#
# data_map_reduced <- filter(bibanda, tc.name %in% names(table(bibanda$tc.name)[table(bibanda$tc.name)>1]))
# data_map_reduced <- select(data_map_reduced, village, tc.name, latitude, longitude)
# write.csv(x = data_map_reduced, file = "village_mapping_reduced.csv")
# Create harmonized trading center variables ------------------------------
bibanda <- dplyr::mutate(bibanda,
tc.name.har = tc.name)
# Recode cases where TC name appears more than once for unrelated villages.
bibanda$tc.name.har[bibanda$village == "KAMUSENENE"][1] <-
"Kamusenene A"
bibanda$tc.name.har[bibanda$village == "KAMUSENENE"][2] <-
"Kamusenene B"
bibanda$tc.name.har[bibanda$village == "BUTUMI LC1"] <-
"Kawawa 2"
bibanda$tc.name.har[bibanda$village == "KYENGEZZA"] <-
"Kyengeza 2"
bibanda$tc.name.har[bibanda$village == "KYEWANISE"] <-
"Kyewanise 2"
bibanda$tc.name.har[bibanda$village == "KIBAALE"][1] <-
"Kibaale A"
bibanda$tc.name.har[bibanda$village == "KIBAALE"][2] <-
"Kibaale B"
bibanda$tc.name.har[bibanda$village == "KIMWANYI ZONE"] <-
"Kasambya 2"
bibanda$tc.name.har[bibanda$village == "KANYOGOGA"][2] <- "Kanyogoga 2"
# Subsetting: Delete bibanda that have some sort of problem -----------------
# Delete one bibanda where GPS cooridinates are not those of Kibanda
bibanda <- filter(bibanda, gps.confirm == "Yes")
# Delete one bibanda that only screens football
bibanda <- filter(bibanda, is.na(only.football))
# No generator, no DVD player, not able to borrow
bibanda <-
subset(bibanda, (
bibanda$borrow.generator != "No" | is.na(bibanda$borrow.generator)
))
bibanda <-
subset(bibanda, (bibanda$borrow.DVD != "No" |
is.na(bibanda$borrow.DVD)))
# Exclude bibanda that cannot be rented out on weekends
bibanda <- subset(bibanda, bibanda$rent.we == "Yes")
# Exclude bibanda that have troublesome comments: TOO CONSERVATIVE?
comments <- c(
"All machines are kept in his shop, kibanda price for 30000 is for only 2 hours, on days where soccer is to be screened the kibanda may not be available, PDA kassanda is the county and on track sheet its buwekula",
"He had used it to store maize grains temporarily if informed in time he can clean up, PDA its kassanda and buwekula on tracksheet",
"He is not usually, around to be contacted",
"His  generator is faulty but he is promising to repair it",
"It is big enough but the speakers have a problem and he claims is working on them",
"It was operational though may reallocate, needs to be contacted in case selected",
"It was temporarily not working because he wanted to renovate",
"Renting it depends on the owner of the plot, it works temporarily, PDA county its Kassanda and on track sheet its buwekula",
"The kibanda had closed because of low customer turn up but he is very willing to rent it out",
"The kibanda is under renovation",
"There is no power",
"This respondent called me 3hours later to tell me that I should remove him from the list, he had consulted from other people and so he changed his mind"
)
remove_rows <-
sapply(comments,function(comment)
which(grepl(
pattern = comment,x = bibanda$enumeratorcomment,ignore.case = T
)))
bibanda <- bibanda[-remove_rows,]
# only bibanda with generators (not clear we should enforce this, some have solar things instead?leaves only 157)
if(i_am_anna){
bibanda <- subset(bibanda,has.generator=="Yes")
}
# Create variable for number of other villages ----------------------------
# Replaced with a soft constraint on the selection probabilities:
# only bibanda in TC that share a max of 3 villages
# bibanda <- subset(bibanda,subset = is.na(tc.villages)|tc.villages<5)
bibanda$N_villages <- bibanda$tc.villages
bibanda$N_villages[bibanda$tc.shared=="No"] <- 1
bibanda$N_villages[is.na(bibanda$N_villages)] <- 1
# only bibanda that are not seasonal
bibanda$permanent <- as.character(bibanda$permanent)
bibanda <- subset(bibanda,subset = permanent == "Permanent")
# Checking for TC name conflicts ------------------------------------------
# Make distance matrix at bibanda level
dist_mat_bib <- create_distance_matrix(
latitudes = bibanda$latitude[is.na(bibanda$latitude)==F],
longitudes = bibanda$longitude[is.na(bibanda$longitude)==F],
km = TRUE)
# Find bibanda within 1km of one another
close_bibs <- apply(dist_mat_bib,1,function(x) bibanda$tc.name.har[x<1])
close <- sapply(close_bibs,function(x)length(unique(x))>1)
# No problematic bibanda:
close_bibs[close]
# These are the problematic ones:
bibanda$tc.name[close][5]
bibanda$latitude[close][5]
bibanda$longitude[close][5]
bibanda$tc.name[close][6]
bibanda$latitude[close][6]
bibanda$longitude[close][6]
# Recoding non-problematic TC names
recode <- c(
"Kakindu trading center",
"Kassanda town",
"Buwalula",
"Kiwawo"
)
recode_to <- c(
"Kakindu",
"Kassanda",
"Buwanula",
"Kiwawu"
)
for(i in 1:length(recode)){
bibanda$tc.name.har[
bibanda$tc.name.har == recode[i]
] <- recode_to[i]
}
# Check that no bibanda in same TC are far away ---------------------------
# Find bibanda within 1km of one another
far_bibs <- apply(dist_mat_bib,1,function(x) bibanda$tc.name.har[x>.5])
length(far_bibs)
length(bibanda$tc.name.har)
tc_name <- "LUSAALIRA"
tc_name %in% far_bibs[[1]]
check_if_in <- function(bib_list,tc_name) tc_name %in% bib_list
too_far <- mapply(FUN = check_if_in,
bib_list = far_bibs,
tc_name = bibanda$tc.name.har)
# No TCs are more than .5KM away from one another
sum(too_far)
# Create trading-center level dataset -------------------------------------
tc <- ddply(.data = bibanda,
.variables = .(tc.name.har),
.fun = summarize,
n.viable.bib = n(),
N_villages = mean(N_villages,na.rm = T),
# We could also take the mean?
# This would get us the centroid between bibanda in a given TC?
longitude = longitude[1],
latitude = latitude[1])
# Create and analyze distance matrices ------------------------------------
# Grab coordinates --------------------------------------------------------
latitudes <- tc$latitude[is.na(tc$latitude)==F]
longitudes <- tc$longitude[is.na(tc$longitude)==F]
# Create distance matrix --------------------------------------------------
dist_mat <- create_distance_matrix(
latitudes = latitudes,
longitudes = longitudes,
km = TRUE)
dist_mat_no_diag <- dist_mat
diag(dist_mat_no_diag) <- NA
exclude_set <- find_proximate_units(distance_matrix = dist_mat,
threshold = 5)
exclude_set
proximity_summary <- sapply(exclude_set,length)
# Add the number of villages to this
proximity_summary <- proximity_summary + tc$N_villages
probability_weights <- proximity_summary/sum(proximity_summary)
set_perms <- 10
set.seed(1234)
anna_admissable_sets <- list()
for (i in (length(anna_admissable_sets)+1):(set_perms)){
anna_admissable_sets[[i]] <- create_set_spatial_buffer(
distance_matrix = dist_mat,
probability_weights = probability_weights,
threshold = 5,sims = 1)
}
# save(anna_admissable_sets, file ="02_output/anna_admissable_sets.Rdata")
print(paste0("The biggest set you made has ",
max(sapply(anna_admissable_sets,length)),
" trading centers in it."))
start_time <- proc.time()
set.seed(1234)
anna_admissable_sets <- list()
for (i in (length(anna_admissable_sets)+1):(set_perms)){
anna_admissable_sets[[i]] <- create_set_spatial_buffer(
distance_matrix = dist_mat,
probability_weights = probability_weights,
threshold = 5,sims = 1)
}
proc.time()- start_time
start_time <- proc.time()
set.seed(1234)
anna_admissable_sets <- list()
for (i in (length(anna_admissable_sets)+1):(set_perms)){
anna_admissable_sets[[i]] <- create_set_spatial_buffer(
distance_matrix = dist_mat,
probability_weights = probability_weights,
threshold = 5,sims = 1)
}
proc.time()- start
start_time <- proc.time()
set.seed(1234)
anna_admissable_sets <- list()
for (i in (length(anna_admissable_sets)+1):(set_perms)){
anna_admissable_sets[[i]] <- create_set_spatial_buffer(
distance_matrix = dist_mat,
probability_weights = probability_weights,
threshold = 5,sims = 1)
}
proc.time()- start_time
start_time <- proc.time()
set.seed(1234)
anna_admissable_sets <- list()
for (i in (length(anna_admissable_sets)+1):(set_perms)){
anna_admissable_sets[[i]] <- create_set_spatial_buffer(
distance_matrix = dist_mat,
probability_weights = probability_weights,
threshold = 5,sims = 1)
}
proc.time()- start_time
start_time <- proc.time()
set.seed(1234)
anna_admissable_sets <- list()
for (i in (length(anna_admissable_sets)+1):(set_perms)){
anna_admissable_sets[[i]] <- create_set_spatial_buffer(
distance_matrix = dist_mat,
probability_weights = probability_weights,
threshold = 5,sims = 1)
}
proc.time()- start_time
start_time <- proc.time()
set.seed(1234)
anna_admissable_sets <- list()
for (i in (length(anna_admissable_sets)+1):(set_perms)){
anna_admissable_sets[[i]] <- create_set_spatial_buffer(
distance_matrix = dist_mat,
probability_weights = probability_weights,
threshold = 5,sims = 1)
}
proc.time()- start_time
library(distancematrix)
library(distancematrix)
